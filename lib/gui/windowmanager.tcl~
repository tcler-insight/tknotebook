#-----------------------------------------------------------------------
# TITLE:
#	windowmanager.tcl
#
# AUTHOR:
#	Will Duquette
#
# DESCRIPTION:
#       notebook-gui component: manages multiple toplevel windows so that
#	the when the last one is destroyed, the application termiantes.
#
#	To participate, toplevel windows register with the windowmanager
#	on creation.  A WM_DELETE_WINDOW handler is created automatically.
#	If a registered toplevel window wishes to destroy itself, it must
#	call "windowmanager destroy $win", which will in turn destroy the
#	window.
#
#	windowmanager doesn't withdraw "."; the application must do that
#	for itself.
#
#-----------------------------------------------------------------------

# windowmanager is a snit::type used as a singleton.

snit::type ::gui:windowmanager {
    #-------------------------------------------------------------------
    # Type Variables

    # Tracks the open windows.  When all are closed, the
    # program is terminated.
    typevariable windowList

    #-------------------------------------------------------------------
    # typemethods

    # Shadow the default create method
    typemethod create {args} {
        error "invalid method"
    }

    # register a new window
    typemethod register {window} {
        lappend windowList $window

        wm protocol $window WM_DELETE_WINDOW [list $type destroy $window]
    }
    
    # destroy a window
    typemethod destroy {window} {
        set ndx [lsearch -exact $windowList $window]

        if {$ndx == -1} {
            error "can't destroy '$window': not registered with windowmanager"
        }

        set windowList [lreplace $windowList $ndx $ndx]

        destroy $window

        if {[llength $windowList] == 0} {
            exit 0
        }
    }

    # Return the list of windows
    typemethod windows {} {
        return $windowList
    }

    # Raise the named window
    typemethod raise {window} {
        raise $window
        wm deiconify $window
    }
}

#-----------------------------------------------------------------------
# Window Menu adaptor
#
# A windowmenu creates a Tk "Window" menu so that it works
# nicely with a the windowmanager component.  A windowmenu
# isn't really a widget; it's a non-GUI component that owns a Tk menu.

snit::type ::gui::windowmenu {
    #-------------------------------------------------------------------
    # Options
    
    delegate option * to options(-menu)
    delegate method * to options(-menu)

    # These options must be set at creation time.
    option -menu {}        ;# The pulldown menu to manage
    option -menubar {}     ;# The menubar the menu will be added to
    option -label {}       ;# The label on the menubar

    #-------------------------------------------------------------------
    # Instance variables

    # Array of actions by entry label
    variable actions

    #-------------------------------------------------------------------
    # constructor

    constructor {args} {
        $self configurelist $args

        # Create the menu
        menu $options(-menu)

        # Figure out the underline location
        set underline [string first "&" $options(-label)]
        
        if {$underline < 0} {
            set underline 0
        } else {
            set options(-label) \
                [string replace $options(-label) $underline $underline]
        }

        # Add it to the menu bar
        $options(-menubar) add cascade \
            -label $options(-label) \
            -underline $underline \
            -menu $options(-menu)

        # Prepare to add items
        $options(-menu) configure -postcommand [mymethod PostCommand]
    }

    # Make sure that the relevant items are valid/invalid.
    method PostCommand {} {
        $options(-menu) delete 0 end

        foreach window [windowmanager windows] {
            $options(-menu) add command \
                -label [wm title $window] \
                -command [list windowmanager raise $window]
        }

        update idletasks
    }

    
}

